package ram.gameport.service.matrix.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ram.gameport.service.matrix.model.Matrix;
import ram.gameport.service.matrix.model.MatrixModel;
import ram.gameport.service.matrix.model.MatrixSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Matrix service. Represents a row in the &quot;matrixService_Matrix&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ram.gameport.service.matrix.model.MatrixModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MatrixImpl}.
 * </p>
 *
 * @author gameport
 * @see MatrixImpl
 * @see ram.gameport.service.matrix.model.Matrix
 * @see ram.gameport.service.matrix.model.MatrixModel
 * @generated
 */
@JSON(strict = true)
public class MatrixModelImpl extends BaseModelImpl<Matrix>
    implements MatrixModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a matrix model instance should use the {@link ram.gameport.service.matrix.model.Matrix} interface instead.
     */
    public static final String TABLE_NAME = "matrixService_Matrix";
    public static final Object[][] TABLE_COLUMNS = {
            { "matrixId", Types.BIGINT },
            { "matrixName", Types.VARCHAR },
            { "positionX", Types.INTEGER },
            { "positionY", Types.INTEGER },
            { "dataType", Types.VARCHAR },
            { "dataValue", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table matrixService_Matrix (matrixId LONG not null primary key,matrixName VARCHAR(75) null,positionX INTEGER,positionY INTEGER,dataType VARCHAR(75) null,dataValue VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table matrixService_Matrix";
    public static final String ORDER_BY_JPQL = " ORDER BY matrix.matrixName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY matrixService_Matrix.matrixName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ram.gameport.service.matrix.model.Matrix"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ram.gameport.service.matrix.model.Matrix"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ram.gameport.service.matrix.model.Matrix"),
            true);
    public static long MATRIXNAME_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ram.gameport.service.matrix.model.Matrix"));
    private static ClassLoader _classLoader = Matrix.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Matrix.class };
    private long _matrixId;
    private String _matrixName;
    private String _originalMatrixName;
    private int _positionX;
    private int _positionY;
    private String _dataType;
    private String _dataValue;
    private long _columnBitmask;
    private Matrix _escapedModel;

    public MatrixModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Matrix toModel(MatrixSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Matrix model = new MatrixImpl();

        model.setMatrixId(soapModel.getMatrixId());
        model.setMatrixName(soapModel.getMatrixName());
        model.setPositionX(soapModel.getPositionX());
        model.setPositionY(soapModel.getPositionY());
        model.setDataType(soapModel.getDataType());
        model.setDataValue(soapModel.getDataValue());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Matrix> toModels(MatrixSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Matrix> models = new ArrayList<Matrix>(soapModels.length);

        for (MatrixSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _matrixId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMatrixId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _matrixId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Matrix.class;
    }

    @Override
    public String getModelClassName() {
        return Matrix.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("matrixId", getMatrixId());
        attributes.put("matrixName", getMatrixName());
        attributes.put("positionX", getPositionX());
        attributes.put("positionY", getPositionY());
        attributes.put("dataType", getDataType());
        attributes.put("dataValue", getDataValue());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long matrixId = (Long) attributes.get("matrixId");

        if (matrixId != null) {
            setMatrixId(matrixId);
        }

        String matrixName = (String) attributes.get("matrixName");

        if (matrixName != null) {
            setMatrixName(matrixName);
        }

        Integer positionX = (Integer) attributes.get("positionX");

        if (positionX != null) {
            setPositionX(positionX);
        }

        Integer positionY = (Integer) attributes.get("positionY");

        if (positionY != null) {
            setPositionY(positionY);
        }

        String dataType = (String) attributes.get("dataType");

        if (dataType != null) {
            setDataType(dataType);
        }

        String dataValue = (String) attributes.get("dataValue");

        if (dataValue != null) {
            setDataValue(dataValue);
        }
    }

    @JSON
    @Override
    public long getMatrixId() {
        return _matrixId;
    }

    @Override
    public void setMatrixId(long matrixId) {
        _matrixId = matrixId;
    }

    @JSON
    @Override
    public String getMatrixName() {
        if (_matrixName == null) {
            return StringPool.BLANK;
        } else {
            return _matrixName;
        }
    }

    @Override
    public void setMatrixName(String matrixName) {
        _columnBitmask = -1L;

        if (_originalMatrixName == null) {
            _originalMatrixName = _matrixName;
        }

        _matrixName = matrixName;
    }

    public String getOriginalMatrixName() {
        return GetterUtil.getString(_originalMatrixName);
    }

    @JSON
    @Override
    public int getPositionX() {
        return _positionX;
    }

    @Override
    public void setPositionX(int positionX) {
        _positionX = positionX;
    }

    @JSON
    @Override
    public int getPositionY() {
        return _positionY;
    }

    @Override
    public void setPositionY(int positionY) {
        _positionY = positionY;
    }

    @JSON
    @Override
    public String getDataType() {
        if (_dataType == null) {
            return StringPool.BLANK;
        } else {
            return _dataType;
        }
    }

    @Override
    public void setDataType(String dataType) {
        _dataType = dataType;
    }

    @JSON
    @Override
    public String getDataValue() {
        if (_dataValue == null) {
            return StringPool.BLANK;
        } else {
            return _dataValue;
        }
    }

    @Override
    public void setDataValue(String dataValue) {
        _dataValue = dataValue;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Matrix.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Matrix toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Matrix) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MatrixImpl matrixImpl = new MatrixImpl();

        matrixImpl.setMatrixId(getMatrixId());
        matrixImpl.setMatrixName(getMatrixName());
        matrixImpl.setPositionX(getPositionX());
        matrixImpl.setPositionY(getPositionY());
        matrixImpl.setDataType(getDataType());
        matrixImpl.setDataValue(getDataValue());

        matrixImpl.resetOriginalValues();

        return matrixImpl;
    }

    @Override
    public int compareTo(Matrix matrix) {
        int value = 0;

        value = getMatrixName().compareTo(matrix.getMatrixName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Matrix)) {
            return false;
        }

        Matrix matrix = (Matrix) obj;

        long primaryKey = matrix.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MatrixModelImpl matrixModelImpl = this;

        matrixModelImpl._originalMatrixName = matrixModelImpl._matrixName;

        matrixModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Matrix> toCacheModel() {
        MatrixCacheModel matrixCacheModel = new MatrixCacheModel();

        matrixCacheModel.matrixId = getMatrixId();

        matrixCacheModel.matrixName = getMatrixName();

        String matrixName = matrixCacheModel.matrixName;

        if ((matrixName != null) && (matrixName.length() == 0)) {
            matrixCacheModel.matrixName = null;
        }

        matrixCacheModel.positionX = getPositionX();

        matrixCacheModel.positionY = getPositionY();

        matrixCacheModel.dataType = getDataType();

        String dataType = matrixCacheModel.dataType;

        if ((dataType != null) && (dataType.length() == 0)) {
            matrixCacheModel.dataType = null;
        }

        matrixCacheModel.dataValue = getDataValue();

        String dataValue = matrixCacheModel.dataValue;

        if ((dataValue != null) && (dataValue.length() == 0)) {
            matrixCacheModel.dataValue = null;
        }

        return matrixCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{matrixId=");
        sb.append(getMatrixId());
        sb.append(", matrixName=");
        sb.append(getMatrixName());
        sb.append(", positionX=");
        sb.append(getPositionX());
        sb.append(", positionY=");
        sb.append(getPositionY());
        sb.append(", dataType=");
        sb.append(getDataType());
        sb.append(", dataValue=");
        sb.append(getDataValue());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("ram.gameport.service.matrix.model.Matrix");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>matrixId</column-name><column-value><![CDATA[");
        sb.append(getMatrixId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>matrixName</column-name><column-value><![CDATA[");
        sb.append(getMatrixName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionX</column-name><column-value><![CDATA[");
        sb.append(getPositionX());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionY</column-name><column-value><![CDATA[");
        sb.append(getPositionY());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataType</column-name><column-value><![CDATA[");
        sb.append(getDataType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataValue</column-name><column-value><![CDATA[");
        sb.append(getDataValue());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
